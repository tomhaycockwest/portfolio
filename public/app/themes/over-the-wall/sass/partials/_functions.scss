// ==========================================================================
// $ Helper Functions
// ==========================================================================

/**
 * Lower range
 * @link https://github.com/zurb/foundation/blob/master/scss/foundation/_functions.scss
 *
 * @param {list} $range
 * @return Item at nth position
 */
@function lower-bound($range) {
	@if length($range) <= 0 {
		@return 0;
	}
	@return nth($range, 1);
}

/**
 * Upper range
 *
 * @param {list} $range
 * @return Item at nth position
 */
@function upper-bound($range) {
	@if length($range) < 2 {
		@return 999999999999;
	}
	@return nth($range, 2);
}

/**
 * Strip units
 * @link https://github.com/sass/sass/issues/533#issuecomment-11675408
 *
 * @param {int} $number
 * @return {int} Number with stripped units
 */
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

/**
 * Parse integer
 *
 * @param {string} $n A number like string
 * @return {int} Parsed integer
 */
@function parse-int($n) {
	@return $n / ($n * 0 + 1);
}

/**
 * String replacement
 *
 * @param {string} $string Input string
 * @param {string} $string Needle
 * @param {string} $replace Replacement
 * @return {string} Updated string
 */
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

/**
 * Convert pixels to ems
 *
 * @param {int} $px Pixels value
 * @param {int} $base The base font size in pixels (optional)
 * @return {string} Ems value
 *
 * @example h1 { font-size: em(24px); }`
 */
@function em($px, $base: 16px) {
	@if unit($px) == 'em' { @return $px; } // dont convert if already ems
	@return ($px / $base) * 1em;
}

/**
 * Photoshop tracking to CSS letter spacing
 *
 * @param {int} $val Amount of Photoshop tracking
 * @return {string} Ems value
 *
 * @example .kerned { letter-spacing: ls(14); }`
 */
@function ls($val) {
	@return ($val / 1000) * 1em;
}

/**
 * Calculate nester border radius size
 * @link http://joshnh.com/tools/get-your-nested-border-radii-right.html
 *
 * @param {value} $outer-size Size of the outher border radius
 * @param {value} $padding Padding between outer and inner box
 * @return {string} Ems value
 *
 * @example .box__inner { border-radius: nested-border-radius(80px, 20px); }`
 */
@function nested-border-radius($outer-size, $padding) {
	@return $outer-size - $padding;
}

//
// Asset Helpers
//
// @link css-tricks.com/snippets/sass/simple-asset-helper-functions
// @example `.foo { background-image: image('bar.png'); }`
//    ->  `.foo { background-image: url('../img/bar.png'); }`
//

//
// Base path for assets (fonts, images...),
// should not include trailing slash
//
// @type String
//
$asset-base-path: '..' !default;

/**
 * Asset URL builder
 *
 * @param {string} $type Asset type matching folder name
 * @param {string} $file Asset file name including extension
 * @param {bool} $raw Return path without wrapping url()
 * @return {string} A url() function leading to the asset
 */
@function asset($type, $file, $raw: false) {
	$path: $asset-base-path + '/' + $type + '/' + $file;

	@if $raw == false {
		$path: url($path);
	}

	@return $path;
}

/**
 * Image asset helper
 *
 * @param {string} $file Asset file name including extension
 * @return {string} A url() function leading to the asset
 * @require {function} asset
 */
@function image($file, $raw: false) {
	@return asset('img', $file, $raw);
}

/**
 * Font asset helper
 *
 * @param {string} $file Asset file name including extension
 * @return {string} A url() function leading to the asset
 * @require {function} asset
 */
@function font($file, $raw: false) {
	@return asset('fonts', $file, $raw);
}
